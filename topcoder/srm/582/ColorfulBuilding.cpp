#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

#define MOD_PRIME 1000000009
#define MAX_M 36
#define MAX_N (MAX_M * MAX_M)
#define MAX_CHARCODE 52
#define MAX_COLOR (MAX_CHARCODE * MAX_CHARCODE)

using namespace std;

int comb[MAX_N + 1][MAX_N + 1];
int dp[MAX_COLOR][MAX_N];
int sums[MAX_N];
int v[MAX_N];

int addmod(int x, int y)
{
	int sum = x + y;
	if (sum >= MOD_PRIME)
		sum -= MOD_PRIME;
	return sum;
}

int submod(int x, int y)
{
	int diff = x - y;
	if (diff < 0)
		diff += MOD_PRIME;
	return diff;
}

int mulmod(int x, int y)
{
	long long prod = x;
	prod = (prod * y) % MOD_PRIME;
	return (int) prod;
}

int invmod(int x)
{
	int result[2][2] = { { 1, 0}, { 0, 1 } };
	int base[2][2] = { { 0, 1}, { 1, 0 } };
	int tmp[2][2];

	int y = x % MOD_PRIME;
	x = MOD_PRIME;
	while (y > 0) {
		int q = x / y;
		int r = x % y;
		base[1][1] = -q;
		memset(tmp, 0, sizeof(tmp));
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++) {
				tmp[i][j] = 0;
				for (int k = 0; k < 2; k++)
					tmp[i][j] += result[i][k] * base[k][j];
			}
		memcpy(result, tmp, sizeof(result));
		x = y;
		y = r;
	}
	int inv = result[1][0];
	if (inv < 0)
		inv += MOD_PRIME;
	return inv;
}

class ColorfulBuilding {
public:
	int reduce_char(int c)
	{
		if (c >= 'a' && c <= 'z')
			return c - 'a';
		else
			return 26 + (c - 'A');
	}

	int color_id(int c1, int c2)
	{
		int c[] = { c1, c2 };
		int id = 0;
		for (int i = 0; i < 2; i++)
			id = MAX_CHARCODE * id + reduce_char(c[i]);
		return id;
	}

	int count(vector <string> color1, vector <string> color2, int L) {
		string s1, s2;
		concatenate(color1, s1);
		concatenate(color2, s2);

		vector<int> color;
		size_t n = s1.size();
		for (size_t i = 0; i < n; i++) {
			int c = color_id(s1[i], s2[i]);
			color.push_back(c);
		}

		for (int i = 0; i < MAX_COLOR; i++)
			fill(dp[i], dp[i] + n, 0);
		fill(sums, sums + n, 0);

		dp[color[n - 1]][1] = 1;
		sums[1] = 1;
		for (size_t i = n - 1; i > 0;) {
			--i;
			int q = (int) (n - i);
			int c = color[i];
			int fact = invmod(q - 1);
			for (int j = 1; j <= L; j++) {
				v[j] = mulmod(q, dp[c][j]);
				if (j > 1)
					v[j] = addmod(v[j], submod(sums[j - 1], dp[c][j - 1]));
				v[j] = mulmod(v[j], fact);
			}
			for (int j = 1; j <= L; j++) {
				sums[j] = addmod(sums[j], submod(v[j], dp[c][j]));
				dp[c][j] = v[j];
			}
		}

		int result = 0;
		for (int i = 0; i < MAX_COLOR; i++)
			result = addmod(result, dp[i][L]);
		for (size_t i = 1; i < n; i++)
			result = mulmod(result, (int) i);

		return result;
	}

	void concatenate(const vector<string> &v, string &s)
	{
		for (vector<string>::const_iterator it = v.begin(); it != v.end(); ++it)
			s += *it;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	ColorfulBuilding *obj;
	int answer;
	obj = new ColorfulBuilding();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"aaba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aaaa"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"aaba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aaba"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ab","ba","a","aab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bb","ba","a","aba"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 432;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"xxxxxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxxxxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxxxxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxxxxx"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"xxxxxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxxxxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxxxxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxxxxx"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 58;
	p3 = 619787617;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"SJXcabKTWeUXhwxGixFepQaQlFxrAedNAtVP","gorBIkcTlOFbLDbFeElYAyAqszQdMbpxSRdE","SQVHPehlNtesbJDflyGxMqvgzjXisRnqDcQO","pIAEBwbmpPWCooQAujbGXFGLvXxTmExLARkf","AFnWyWKVObfxDGCjTxdZaObgwdxlPKtIxaAd","uznMpJVNjAofbHJjOrZeSHgSagOCUMGbvkVR","LBRrDbTAyKfVnedKiRfzgRzECpcsziqaTwdo","JrJHvsEVVGDkNVGqLbpxyLDPloBuNDQKnReI","SSYpbjKHSCnQhuyYrVauWDHDyhAoGyecrZMv","UdetQfWEUWHHuAxRSdkJOOJSixKpQXpCFZHO","KXVsQbuQtIgsULOMsTvPFNUqkBldMTLCipYK","hoXConjnDWQkZVtyZlwSedvdVrNWqQhGUClQ","TpsvvyoXsXmQpBAGGVDrXCkodoRHQZmpoQDW","csiJspzTqeFBRmPgeEtTAzfrfCGlTZqcPuyO","vsPDVBJVaJmUAtDdcsKoUkPEbDmAwtZKwjjP","MOfoMhMiKIvGQoeIJXHzyClWRtRuKXMqxUAF","KyyUCkRBjsYvmPFFEGBqqVhIUdtvIyyLacfu","BfuwfSajSlcuTzhMufHSQLudvGEGlyHsEmBD","PLpIXZkdyXveTMfSvqnDGKWOZrTBMUIlZrqF","dzVMCqrSLbanRJTYpDJNHAOLPSzmvSEPQJYm","rAjRkrSjouJyFaCSPPLYSzqDmMoADyWAbobJ","eOCBrJNoyFnGpXpxiExXcoOHnVsaEPXhPfLe","XMjRksnxWssPEINhdhbiLBSYpCLtwNshFjXS","HnnDeUAbuswsgsYQuAaXySLkFYUwFXwYTreM","uqLnwOEGbwZZDgAAWEdLRZxFlogDmlhjhgHM","NcfaQsgPQfirkYDRFrLQpySmB"
			"GfRHumKULZf","mOpmmgclsxRzXskEywfryqCRyATNoJwnlHiD","AnoKoKAjrasttjNlHCROnvTJMhEHlVPVoVMo","yegLyIuRkkENFAjwzDoPLKjgUHHEkfzYDIpo","EcxRGGfuaBXUFXkSxctJWOLmmVbvoMkWtTvV","nBMkOBHgaltEVzfyGxseGhmBscfGIbxFbqRn","GvkEcLtqdOofGtsbWDafVMbNdJxsffKDzSiR","jhZQUVzTzalrZcebvyqPWtOUUyniBKTWdyLi","ODJLQPMdjDdTlxrfGsNmBfeGYjzeXApqKDhJ","vlJkWMzdVQujKdLViQClOrJXMTBkuZEasFgg","FAsbuzrLVIgaryqXBfuBRAbReleXSSgEKSvt"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"XAhlUHtfjOpOlQlowWppQcodMGUiqoLobxnD","IDzGlKrHiVGdBjZxIcoxjwagbWieKvUwZrjg","SkpkTVeIFeoNQzUUgmYAYskKONNZdgXxSiWd","rXBGhTmqnvxkmqiutoDzPusDiOUggEFXGCzm","fzrxVuTbFXunGbeEavjshmrIRlDorTuISCxn","LsvIaxTkOBjcskiekmrKNNFEXqnfMNXLWqqu","ekzxGIlbJPVEQPYAbTuMtZKsCiubDXDiBVzU","hZuOCJxvBOYENGSFcUiKKAKfCdebutVmnyvB","UveNkKRQmHnedrROQOpHJfrHjwcNLUShlDbn","ptUkvbaGDryHRkYfHKLkSgVpjWCEcgazyxGK","nVPYEqTTJsRPjzjfdOiULhnZPFeNcnbXaQlk","IPXBXRhMQIkxpygsgbcRfMuvIcuzUPPHGOWX","yWWlNyEyqZSIOXBFAybIuFpVqpvmKRaRFrAE","EvBJVtHvKhjrFcmtpdBbFTdTVtXXZQKAglKT","bCVjHzUvyINFkxXageZQMzCyNhcifACdJVDh","lZITYcDSeIbLweyFtoMAfOQyBNupKlhcNpgo","BduslNrJdWOUukYFFidEkMFaghfofpxVgvJd","YrJpDZKqdjEPzdLsOQEdkcrBfNHPemXHokCW","GjeUKSGjDlgKTyUGNrMQbBLxRUcgrWpkAwOD","wgxTcswqdJHaDugNIRMvrhBsdDaJAssVbSRW","qmVmqFEpvgGioMXDSFqEoQcDOAaUoGPEovSO","KrukPlpfOhawaovCfteTSCIdLMrtImVtiMyQ","ykwmxHsKMFzFHwcbyyedLvhZPnaNGqJMMCxd","HUNYCXjNLQIFCLLGpCXHBCHLTxLynBxnHFbx","uwjzbNbJepVFgMPUXVirxYHzExquBEtPmKju","xXAxAbJePyUsVHeLytDvAxBGM"
			"RtnvCEiZZqe","xMkQoIVxWPXPgaOYmDjTOXiMImVdzojERNxS","dwICFwMAmdOIUxyAdXdshasnzwyhfnVWVqZJ","etypXNVvSTEQvriGBZdSGmDEHhvpSqkFklCS","YkxpFBCRYUueRcKaJUXVdaMoYMYEooPQVMOr","DTrexDqclZNKdPuTRFHualJSFziCLPCZjpxo","TfEijcAsSJPikkmBSbXMqYHAhPTcpcKVSkIX","xKXHYPYMJxFpSbxltDKYuRiTkOLxpQKnXZPs","YFYuvuYHfpFJcrLNIdlNfBxRnWdppsdalBkx","NFTysBvNFjejdnlhRTclbcfGipNCxpFEOriY","thkgVflJYmbUYbIlafNUMGePQWiZyYzYXvUR"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1200;
	p3 = 396065426;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
