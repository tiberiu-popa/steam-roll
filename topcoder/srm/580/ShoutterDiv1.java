import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

class Pair<S extends Comparable<S>, T extends Comparable<T>> implements Comparable<Pair<S, T>> {

	S x;
	T y;

	public Pair(S x, T y)
	{
		this.x = x;
		this.y = y;
	}

	public int compareTo(Pair<S, T> other)
	{
		int res = x.compareTo(other.x);
		if (res != 0)
			return res;
		else
			return y.compareTo(other.y);
	}

	public String toString()
	{
		return "(" + x + "," + y + ")";
	}

}

class IndexedPair extends Pair<Pair<Integer, Integer>, Integer> {

	public IndexedPair(int x, int y, int idx)
	{
		super(new Pair<Integer, Integer>(x, y), idx);
	}

	public Integer getX()
	{
		return x.x;
	}

	public Integer getY()
	{
		return x.y;
	}

	public Integer getIndex()
	{
		return y;
	}

	public String toString()
	{
		return String.format("(%s,%s:%s)", x.x, x.y, y);
	}

}

public class ShoutterDiv1
{

	public void flipPair(Pair<Integer, Integer> p)
	{
		int tmp = -p.x;
		p.x = -p.y;
		p.y = tmp;
	}

	public void countDAG(IndexedPair[] v, int[] counts)
	{
		int n = v.length;
		int[] points = new int[n];

		Arrays.sort(v);
		Arrays.fill(points, -1);
		for (int i = 0; i < n; i++) {
			int idx = -1;
			int max_pos = Integer.MIN_VALUE;
			for (int j = i + 1; j < n; j++)
				if (v[j].getX() <= v[i].getY() && v[j].getY() > max_pos) {
					max_pos = v[j].getY();
					idx = j;
				}
			if (idx >= 0 && max_pos > v[i].getY()) {
				points[i] = idx;
			}
		}

		for (int i = 0; i < n; i++) {
			int idx = v[i].getIndex();
			int k = i;
			int p = 0;
			while (v[n - 1].getX() > v[k].getY()) {
				if (points[k] >= 0) {
					k = points[k];
					++counts[idx];
				} else {
					counts[idx] = -1;
					break;
				}
			}
		}
	}

	public int count(String[] s1000, String[] s100, String[] s10, String[] s1, String[] t1000, String[] t100, String[] t10, String[] t1)
	{
		List<Integer> s = new ArrayList<Integer>();
		List<Integer> t = new ArrayList<Integer>();
		for (int i = 0; i < s1000.length; ++i) {
			for (int j = 0; j < s1000[i].length(); ++j) {
				int p = buildNumber(s1000, s100, s10, s1, i, j);
				int q = buildNumber(t1000, t100, t10, t1, i, j);

				s.add(p);
				t.add(q);
			}
		}

		IndexedPair[] v = new IndexedPair[s.size()];
		for (int i = 0; i < v.length; i++)
			v[i] = new IndexedPair(s.get(i), t.get(i), i);

		int[] l = new int[v.length];
		int[] r = new int[v.length];

		countDAG(v, l);

		for (IndexedPair entry : v)
			flipPair(entry.x);
		countDAG(v, r);

		int[] sum = new int[v.length];
		for (int i = 0; i < sum.length; i++)
			if (l[i] >= 0 && r[i] >= 0)
				sum[i] = l[i] + r[i];
			else
				sum[i] = Integer.MAX_VALUE;

		for (int i = 0; i < v.length; i++)
			if (sum[i] != Integer.MAX_VALUE) {
				for (int j = 0; j < v.length; j++)
					if (j != i && s.get(i) <= s.get(j) && t.get(j) <= t.get(i)) {
						if (sum[i] + 1 < sum[j])
							sum[j] = sum[i] + 1;
					}
			}

		int result = 0;
		for (int i = 0; i < sum.length; i++) {
			if (sum[i] == Integer.MAX_VALUE)
				return -1;
			result += sum[i];
		}

		return result;
	}

	private int buildNumber(String[] s1000, String[] s100, String[] s10, String[] s1, int i, int j)
	{
		StringBuilder sb = new StringBuilder();
		sb.append(s1000[i].charAt(j));
		sb.append(s100[i].charAt(j));
		sb.append(s10[i].charAt(j));
		sb.append(s1[i].charAt(j));
		return Integer.parseInt(sb.toString());
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, String[] p1, String[] p2, String[] p3, String[] p4, String[] p5, String[] p6, String[] p7, boolean hasAnswer, int p8) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p2[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p3[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p4.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p4[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p5.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p5[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p6.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p6[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p7.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p7[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		ShoutterDiv1 obj;
		int answer;
		obj = new ShoutterDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1, p2, p3, p4, p5, p6, p7);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p8);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p8;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		String[] p2;
		String[] p3;
		String[] p4;
		String[] p5;
		String[] p6;
		String[] p7;
		int p8;
		
		// ----- test 0 -----
		p0 = new String[]{"22","2"};
		p1 = new String[]{"00","0"};
		p2 = new String[]{"11","1"};
		p3 = new String[]{"21","4"};
		p4 = new String[]{"22","2"};
		p5 = new String[]{"00","0"};
		p6 = new String[]{"11","1"};
		p7 = new String[]{"43","6"};
		p8 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"00"};
		p1 = new String[]{"00"};
		p2 = new String[]{"00"};
		p3 = new String[]{"13"};
		p4 = new String[]{"00"};
		p5 = new String[]{"00"};
		p6 = new String[]{"00"};
		p7 = new String[]{"24"};
		p8 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"0000"};
		p1 = new String[]{"0000"};
		p2 = new String[]{"0000"};
		p3 = new String[]{"1234"};
		p4 = new String[]{"0000"};
		p5 = new String[]{"0000"};
		p6 = new String[]{"0000"};
		p7 = new String[]{"2345"};
		p8 = 6;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"0000000000"};
		p1 = new String[]{"0000000000"};
		p2 = new String[]{"0000000000"};
		p3 = new String[]{"7626463146"};
		p4 = new String[]{"0000000000"};
		p5 = new String[]{"0000000000"};
		p6 = new String[]{"0000000000"};
		p7 = new String[]{"9927686479"};
		p8 = 18;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"00000000000000000000000000000000000000000000000000"};
		p1 = new String[]{"00000000000000000000000000000000000000000000000000"};
		p2 = new String[]{"50353624751857130208544645495168271486083954769538"};
		p3 = new String[]{"85748487990028258641117783760944852941545064635928"};
		p4 = new String[]{"00000000000000000000000000000000000000000000000000"};
		p5 = new String[]{"00000000000000000000000000000000000000000000000000"};
		p6 = new String[]{"61465744851859252308555855596388482696094965779649"};
		p7 = new String[]{"37620749792666153778227385275518278477865684777411"};
		p8 = 333;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
