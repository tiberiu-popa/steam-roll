#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define MAX_N 50

using namespace std;


class SurveillanceSystem {
public:
	string getContainerInfo(string containers, vector <int> reports, int L) {
		vector<int> v, sums, area;
		int rindex[MAX_N + 1];
		int tindex[MAX_N + 1];

		for (size_t i = 0; i < containers.length(); i++)
			v.push_back(containers[i] == 'X');
		sums.push_back(0);
		for (size_t i = 0; i < v.size(); i++)
			sums.push_back(sums.back() + v[i]);
		for (size_t i = 0; i + L < sums.size(); i++)
			area.push_back(sums[i + L] - sums[i]);

		memset(rindex, 0, (L + 1) * sizeof(*rindex));
		for (size_t i = 0; i < reports.size(); i++)
			rindex[reports[i]]++;

		memset(tindex, 0, (L + 1) * sizeof(*rindex));
		for (size_t i = 0; i < area.size(); i++)
			tindex[area[i]]++;

		string result;
		for (size_t i = 0; i < v.size(); i++)
			result += "-";
		for (size_t i = 0; i <= L; i++)
			if (rindex[i] > 0) {
				vector<int> u(v.size());
				for (size_t j = 0; j < area.size(); j++)
					if (area[j] == i) {
						for (size_t k = j; k < j + L; k++)
							u[k]++;
					}
				for (size_t j = 0; j < u.size(); j++)
					if (u[j] > 0) {
						if (u[j] + rindex[i] > tindex[i]) {
							result[j] = '+';
						} else {
							if (result[j] == '-')
								result[j] = '?';
						}
					}
			}

		return result;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	SurveillanceSystem *obj;
	string answer;
	obj = new SurveillanceSystem();
	clock_t startTime = clock();
	answer = obj->getContainerInfo(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = "-X--XX";
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?++++";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "-XXXXX-";
	int t1[] = {2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?" "?";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "------X-XX-";
	int t1[] = {3,0,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = "++++++++++?";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "-XXXXX---X--";
	int t1[] = {2,1,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?++++?" "?";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "-XX--X-XX-X-X--X---XX-X---XXXX-----X";
	int t1[] = {3,3,3,3,3,3,3,3,3,3,3,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	p3 = "?" "?" "?++++?++++++++++++++++++++?" "?" "?" "?" "?" "?--";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
