#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define MAX_N 300

using namespace std;

vector<int> edges[2][MAX_N];
int dist[2][MAX_N][MAX_N];
bool visited[MAX_N];

class TreeUnion {
public:

	void read_tree(vector<int> &parent, vector<string> &tstr)
	{
		string s;
		for (size_t i = 0; i < tstr.size(); i++)
			s += tstr[i];
		char *cs = strdup(s.c_str());
		char *p = strtok(cs, " ");
		parent.push_back(-1);
		while (p != NULL) {
			parent.push_back(atoi(p));
			p = strtok(NULL, " ");
		}
		free(cs);
	}

	void parent_to_edges(vector<int> edges[], vector<int> &parent)
	{
		for (size_t i = 0; i < parent.size(); i++)
			edges[i].clear();
		for (size_t i = 0; i < parent.size(); i++)
			if (parent[i] >= 0) {
				edges[i].push_back(parent[i]);
				edges[parent[i]].push_back(i);
			}
	}

	void dfs(vector<int> edges[], int dist[], int root)
	{
		visited[root] = true;
		for (size_t i = 0; i < edges[root].size(); i++) {
			int node = edges[root][i];
			if (!visited[node]) {
				dist[node] = dist[root] + 1;
				dfs(edges, dist, node);
			}
		}
	}

	double expectedCycles(vector <string> tree1, vector <string> tree2, int K) {
		vector<int> parent[2];
		read_tree(parent[0], tree1);
		read_tree(parent[1], tree2);
		for (int i = 0; i < 2; i++)
			parent_to_edges(edges[i], parent[i]);

		size_t n = parent[0].size();

		for (int i = 0; i < 2; i++) {
			for (size_t j = 0; j < n; j++) {
				fill(visited, visited + n, false);
				fill(dist[i][j], dist[i][j] + n, 0);
				dfs(edges[i], dist[i][j], j);
			}
		}

		vector<int> v(n);
		for (size_t i = 0; i < n; i++)
			for (size_t j = i + 1; j < n; j++)
				v[dist[1][i][j]]++;

		double result = 0.0;
		for (size_t i = 0; i < n; i++)
			for (size_t j = i + 1; j < n; j++) {
				int d = dist[0][i][j];
				if (d > 0 && d + 2 < K && K - d - 2 < n)
					result += v[K - d - 2];
			}

		result *= 2;
		result /= n;
		result /= n - 1;

		return result;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	TreeUnion *obj;
	double answer;
	obj = new TreeUnion();
	clock_t startTime = clock();
	answer = obj->expectedCycles(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 1.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 1.3333333333333333;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	p3 = 0.3333333333333333;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"0 ","1 1 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0 1 0 ","1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 4.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"0 1 2 0 1 2 0 1 2 5 6 1","0 11"," 4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"0 1 1 0 2 3 4 3 4 6 6"," 10 12 12"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	p3 = 13.314285714285713;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"{0 1}"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"{0 1}"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, false, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"{0 1}"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"{0 1}"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, false, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
