#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

#define MOD_PRIME 1000000007
#define MAX_M 1000000

using namespace std;

int pow2m[MAX_M + 2];
int fact[MAX_M + 2];
int invfact[MAX_M + 2];

int addmod(int x, int y, int p)
{
	long long sum = x;
	sum += y;
	if (sum >= p)
		sum -= p;
	return (int) sum;
}

int submod(int x, int y, int p)
{
	long long diff = x;
	diff -= y;
	if (diff < 0)
		diff += p;
	return (int) diff;
}

int mulmod(int x, int y, int p)
{
	long long prod = x;
	prod = (prod * y) % p;
	return (int) prod;
}

int sqrmod(int x, int p)
{
	return mulmod(x, x, p);
}

int powmod(int x, int e, int p)
{
	long long result = 1;
	long long base = x;

	if (e > 0) {
		while (true) {
			if (e & 1) {
				result = (result * base) % p;
			}
			e >>= 1;
			if (e <= 0)
				break;
			base = (base * base) % p;
		}
	}

	return (int) result;
}

int invmod(int x, int p)
{
	int result[2][2] = { {1, 0}, {0, 1} };
	int base[2][2] = { {0, 1}, {1, 0}};

	int y = x % p;
	x = p;
	while (y > 0) {
		int q = x / y;
		int r = x % y;
		base[1][1] = -q;
		int tmp[2][2] = { {0, 0}, {0, 0} };
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++)
				for (int k = 0; k < 2; k++)
					tmp[i][j] += result[i][k] * base[k][j];
		memcpy(result, tmp, sizeof(result));
		x = y;
		y = r;
	}

	int inv = result[1][0];
	if (inv < 0)
		inv += p;
	return inv;
}

void build_pow2m(int m)
{
	pow2m[0] = 1;
	for (int i = 1; i <= m + 1; i++)
		pow2m[i] = addmod(pow2m[i - 1], pow2m[i - 1], MOD_PRIME);
}

void build_fact(int m)
{
	fact[0] = 1;
	invfact[0] = 1;
	for (int i = 1; i <= m + 1; i++) {
		fact[i] = mulmod(fact[i - 1], i, MOD_PRIME);
		invfact[i] = invmod(fact[i], MOD_PRIME);
	}
}

int bincoef(int n, int k)
{
	int x = mulmod(invfact[k], invfact[n - k], MOD_PRIME);
	return mulmod(fact[n], x, MOD_PRIME);
}

class LittleElephantAndBoard {
public:
	int getNumber(int M, int R, int G, int B) {
		int x = M - R;
		int y = M - G;
		int z = M - B;
		if (x < 0 || y < 0 || z < 0)
			return 0;

		build_pow2m(M);
		build_fact(M);
		int result = 0;
		int diff = abs(y - z);
		if (x == 0) {
			if (diff <= 1)
				result = 2;
		} else {
			for (int i = max(x - 1, 0); i <= x + 1; i++) {
				for (int j = diff; j <= i; j += 2) {
					int k = i - j;
					if (M < x + i + k)
						continue;
					int r = (M - x - i - k) / 2;
					int delta = bincoef(r + (i - 1), i - 1);
					delta = mulmod(delta, pow2m[k], MOD_PRIME);
					delta = mulmod(delta, bincoef(i, k), MOD_PRIME);
					delta = mulmod(delta, bincoef(i - k, (i - k - diff) / 2), MOD_PRIME);
					if (i == x)
						delta = addmod(delta, delta, MOD_PRIME);
					result = addmod(result, delta, MOD_PRIME);
				}
			}
		}
		result = addmod(result, result, MOD_PRIME);
		return result;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	LittleElephantAndBoard *obj;
	int answer;
	obj = new LittleElephantAndBoard();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 1;
	p3 = 1;
	p4 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 0;
	p4 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 7;
	p2 = 7;
	p3 = 6;
	p4 = 496;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 474;
	p1 = 250;
	p2 = 300;
	p3 = 398;
	p4 = 969878317;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 16;
	p1 = 8;
	p2 = 10;
	p3 = 14;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, false, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
