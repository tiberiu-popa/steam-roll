#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FruitTrees {
public:
	int gcd(int x, int y)
	{
		if (x < y)
			return gcd(y, x);
		while (y > 0) {
			int r = x % y;
			x = y;
			y = r;
		}
		return x;
	}

	int maxDist(int apple, int kiwi, int grape) {
		vector<int> values;
		values.push_back(apple);
		values.push_back(kiwi);
		values.push_back(grape);
		sort(values.begin(), values.end());
		int ab = gcd(values[1], values[2]);
		int ac = gcd(values[0], values[2]);
		int bc = gcd(values[0], values[1]);
		int res = 0;
		for (int i = 0; i < values[0]; i++) {
			int u = i % ac;
			if (u > ac / 2)
				u = ac - u;
			for (int j = 0; j < values[1]; j++) {
				int v = j % ab;
				if (v > ab / 2)
					v = ab - v;
				int w = (j - i) % bc;
				if (w < 0)
					w += bc;
				if (w > bc / 2)
					w = bc - w;
				int cand = min(min(u, v), w);
				if (cand > res)
					res = cand;
			}
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	FruitTrees *obj;
	int answer;
	obj = new FruitTrees();
	clock_t startTime = clock();
	answer = obj->maxDist(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 5;
	p2 = 8;
	p3 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 3;
	p2 = 6;
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 40;
	p1 = 30;
	p2 = 20;
	p3 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 899;
	p1 = 1073;
	p2 = 1147;
	p3 = 14;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 2000;
	p1 = 2000;
	p2 = 2000;
	p3 = 666;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
